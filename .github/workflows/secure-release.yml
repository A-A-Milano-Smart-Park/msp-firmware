---
name: secure-release

on:
  push:
    tags:
      - 'v*'

jobs:
  secure-release:
    runs-on: ubuntu-22.04
    environment: production  # Requires approval for production releases
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Fetch git tag info
        run: git fetch --tags --force
        
      - name: Set environment variables
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
          
      - name: Install Arduino CLI host dependencies
        run: sudo apt install -y python-is-python3 openssl
        
      - name: Install Arduino CLI python dependencies
        run: pip3 install pyserial cryptography
        
      - name: Setup Arduino CLI environment
        run: make env
        
      - name: Generate build-specific signing key
        run: |
          # Generate ephemeral key pair for this build
          openssl genpkey -algorithm RSA -pkcs8 -out build_private_key.pem -pkeyopt rsa_keygen_bits:3072
          openssl pkey -in build_private_key.pem -pubout -out build_public_key.pem
          
      - name: Build firmware with security features
        run: |
          make API_SECRET_SALT="${{ secrets.API_SECRET_SALT }}" \
               API_SERVER="${{ secrets.API_SERVER }}" \
               VERSION_STRING="${{ env.RELEASE_VERSION }}" \
               BUILD_TIMESTAMP="${{ env.BUILD_TIMESTAMP }}" \
               CUSTOM_DEBUG_LEVEL=1 \
               ENABLE_PRODUCTION_SECURITY=1
               
      - name: Calculate firmware hash
        run: |
          FIRMWARE_HASH=$(sha256sum var/build/msp-firmware.ino.bin | cut -d' ' -f1)
          echo "FIRMWARE_HASH=$FIRMWARE_HASH" >> $GITHUB_ENV
          echo "Firmware SHA256: $FIRMWARE_HASH"
          
      - name: Sign firmware binary
        run: |
          # Create detached signature
          openssl dgst -sha256 -sign build_private_key.pem \
            -out var/build/msp-firmware.ino.bin.sig \
            var/build/msp-firmware.ino.bin
            
          # Create signature verification info
          cat > firmware_info.json << EOF
          {
            "version": "${{ env.RELEASE_VERSION }}",
            "build_timestamp": "${{ env.BUILD_TIMESTAMP }}",
            "sha256": "${{ env.FIRMWARE_HASH }}",
            "signature_algorithm": "RSA-3072-SHA256",
            "build_environment": "github-actions",
            "repository": "${{ github.repository }}",
            "commit": "${{ github.sha }}"
          }
          EOF
          
      - name: Create secure OTA bundle
        run: |
          # Create OTA-ready firmware with embedded metadata
          mkdir -p ota-bundle
          cp var/build/msp-firmware.ino.bin ota-bundle/firmware_${{ env.RELEASE_VERSION }}.bin
          cp var/build/msp-firmware.ino.bin.sig ota-bundle/firmware_${{ env.RELEASE_VERSION }}.bin.sig
          cp build_public_key.pem ota-bundle/build_public_key.pem
          cp firmware_info.json ota-bundle/firmware_info.json
          
      - name: Verify signature (self-test)
        run: |
          openssl dgst -sha256 -verify build_public_key.pem \
            -signature var/build/msp-firmware.ino.bin.sig \
            var/build/msp-firmware.ino.bin
          echo "‚úÖ Signature verification successful"
          
      - name: Create release artifacts
        run: |
          # Standard firmware packages (unchanged)
          zip --junk-paths msp-firmware-${{ env.RELEASE_VERSION }}-win64.zip \
            README.md SECURITY.md \
            scripts/runme.bat \
            var/build/msp-firmware.ino.bin \
            var/build/msp-firmware.ino.partitions.bin \
            var/build/msp-firmware.ino.bootloader.bin \
            var/packages/esp32/hardware/esp32/$(make print-core-version)/tools/partitions/boot_app0.bin
            
          # Secure OTA package
          cd ota-bundle && zip -r ../msp-firmware-${{ env.RELEASE_VERSION }}-ota-secure.zip . && cd ..
          
          # Standard OTA file (for backwards compatibility)
          cp var/build/msp-firmware.ino.bin update_${{ env.RELEASE_VERSION }}.bin
          
      - name: Clean up sensitive files
        run: |
          rm -f build_private_key.pem
          shred -vfz -n 3 build_private_key.pem 2>/dev/null || true
          
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          name: "Secure Release ${{ env.RELEASE_VERSION }}"
          body: |
            ## üîí Security Information
            **Firmware Hash (SHA256):** `${{ env.FIRMWARE_HASH }}`
            **Build Timestamp:** `${{ env.BUILD_TIMESTAMP }}`
            **Signature Algorithm:** RSA-3072-SHA256
            
            ## üì¶ Downloads
            - `msp-firmware-*-ota-secure.zip`: Signed OTA package with verification
            - `update_*.bin`: Standard OTA firmware (legacy)
            - `msp-firmware-*-win64.zip`: Windows flashing package
            
            ## üõ°Ô∏è Verification
            Use the included public key and signature files to verify firmware integrity.
            The device will automatically verify signatures when secure boot is enabled.
            
            **‚ö†Ô∏è Security Notice:** Only install firmware from official releases.
            
          artifacts: |
            msp-firmware-${{ env.RELEASE_VERSION }}-win64.zip,
            msp-firmware-${{ env.RELEASE_VERSION }}-ota-secure.zip,
            update_${{ env.RELEASE_VERSION }}.bin
          artifactContentType: application/octet-stream
          draft: false
          prerelease: false