---
name: release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Fetch git tag info
        run: git fetch --tags --force
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Install Arduino CLI host dependencies
        run: sudo apt install -y python-is-python3
      - name: Install Arduino CLI python dependencies
        run: pip3 install pyserial
      - name: Setup Arduino CLI environment
        run: make env
      - name: Build the sketch
        run: make API_SECRET_SALT="${{ secrets.API_SECRET_SALT }}" API_SERVER="${{ secrets.API_SERVER }}" CUSTOM_DEBUG_LEVEL=1
      - name: Download external flashing tools to attach to release
        run: curl -LO https://github.com/espressif/esptool/releases/download/v4.5.1/esptool-v4.5.1-win64.zip && unzip -j esptool-v4.5.1-win64.zip -d esptool
      - name: Grab core version
        run: echo "CORE_VERSION=$(make print-core-version)" >> $GITHUB_ENV
      - name: Zip artifacts
        run: >
          zip --junk-paths msp-firmware-${{ env.RELEASE_VERSION }}.zip \
            README.md \
            scripts/RUNME.BAT \
            var/build/msp-firmware.ino.bin \
            var/build/msp-firmware.ino.partitions.bin \
            var/packages/esp32/hardware/esp32/${{ env.CORE_VERSION }}/tools/partitions/boot_app0.bin \
            var/packages/esp32/hardware/esp32/${{ env.CORE_VERSION }}/tools/sdk/esp32/bin/bootloader_qio_80m.bin \
            esptool/esptool.exe
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          name: Release ${{ github.ref }}
          artifacts: "msp-firmware-${{ env.RELEASE_VERSION }}.zip"
          artifactContentType: application/zip
